{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laviero\\\\Documents\\\\Weather\\\\src\\\\pages\\\\Maze.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generate = (dim, animateWallStep, setIsGenerating, setHasGenerated) => {\n  setHasGenerated(false);\n  // generate board\n  let boardDim = dim * 2 + 1;\n  let cycleDelay = boardDim >= 20 ? 1 : 20;\n  let board = [];\n  let walls = [];\n  for (let i = 0; i < boardDim; i++) {\n    let row = [];\n    for (let j = 0; j < boardDim; j++) {\n      if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\n        row.push([1, new Set([[i, j]])]);\n      } // walls on edges\n      else if (i % 2 === 0 || j % 2 === 0) {\n        row.push([1, new Set([[i, j]])]);\n        if (!(i % 2 === 0 && j % 2 === 0)) {\n          // add to walls if seperates two open spaces\n          walls.push([i, j]);\n        }\n      } // walls on even squares\n      else {\n        row.push([0, new Set([[i, j]])]);\n      }\n      ;\n    }\n    board.push(row);\n  }\n\n  // entrance and exit\n  board[0][1][0] = 0;\n  board[boardDim - 1][boardDim - 2][0] = 0;\n\n  // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\n\n  // fisher-yates shuffle wall array\n  for (let i = walls.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\n  }\n  let wallI = 0;\n  const processWall = () => {\n    if (wallI < walls.length) {\n      let i = walls[wallI][0],\n        j = walls[wallI][1];\n      let adj = [];\n      if (i - 1 > 0 && board[i - 1][j][0] == 0) adj.push([i - 1, j]); // add adj\n      if (j - 1 > 0 && board[i][j - 1][0] == 0) adj.push([i, j - 1]);\n      if (i + 1 < boardDim - 1 && board[i + 1][j][0] == 0) adj.push([i + 1, j]);\n      if (j + 1 < boardDim - 1 && board[i][j + 1][0] == 0) adj.push([i, j + 1]);\n      //console.log(adj.length);\n      let duplicate = false; // verify adj spaces no duplicate sets\n      for (let adjI = 0; adjI < adj.length; adjI++) {\n        for (let adjJ = 0; adjJ < adj.length; adjJ++) {\n          let iI = adj[adjI][0],\n            iJ = adj[adjI][1];\n          let jI = adj[adjJ][0],\n            jJ = adj[adjJ][1];\n          if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\n            duplicate = true;\n            //console.log(\"DENIED at\", i, \",\", j);\n            break;\n          }\n        }\n      }\n      if (!duplicate && adj.length > 0) {\n        // if no adj spaces have dup sets\n        //console.log(\"passed at\", i, \",\", j);\n        board[i][j][0] = 0; // make this wall a space\n        let sumSet = new Set();\n        sumSet.add([i, j]); // add wall to adj spaces' sets\n        for (let adjI = 0; adjI < adj.length; adjI++) {\n          // combine sets of adj spaces into sumSet\n          let curI = adj[adjI][0],\n            curJ = adj[adjI][1];\n          sumSet = sumSet.union(board[curI][curJ][1]);\n        }\n        for (let item of sumSet) {\n          // set sets of cells in sumSet to sumSet\n          let curI = item[0],\n            curJ = item[1];\n          board[curI][curJ][1] = sumSet;\n        }\n      }\n      wallI++;\n      animateWallStep(board);\n      setTimeout(processWall, cycleDelay);\n    }\n    if (wallI >= walls.length) {\n      setIsGenerating(false);\n      setHasGenerated(true);\n      animateWallStep(board);\n    }\n  };\n  processWall();\n\n  //console.log(\"Final wallI\", wallI);\n  return board;\n};\nconst Maze = ({\n  board,\n  playerPos,\n  setPlayerPos,\n  setWin,\n  setGameStarted\n}) => {\n  _s();\n  const boardSize = board.length;\n  const cellSize = `${60 / boardSize}vh`;\n\n  //const [playerPos, setPlayerPos] = useState([1,1])\n\n  const movePlayer = e => {\n    setPlayerPos(prevPos => {\n      if (prevPos[0] === -1 && prevPos[1] === -1) return prevPos;\n      let newPos = {\n        ...prevPos\n      };\n      if (e.key === 'ArrowUp' || e.key === 'w') {\n        newPos[0] = Math.max(prevPos[0] - 1, 0);\n      } else if (e.key === 'ArrowDown' || e.key === 's') {\n        newPos[0] = Math.min(prevPos[0] + 1, boardSize - 1);\n      } else if (e.key === 'ArrowLeft' || e.key === 'a') {\n        newPos[1] = Math.max(prevPos[1] - 1, 0);\n      } else if (e.key === 'ArrowRight' || e.key === 'd') {\n        newPos[1] = Math.min(prevPos[1] + 1, boardSize - 1);\n      }\n\n      // prevent move into wall\n      if (board[newPos[0]][newPos[1]][0] === 1 && (newPos != [0, 1] || newPos != [boardSize - 1, boardSize - 2])) {\n        return prevPos;\n      }\n      // detect win\n      if (newPos[0] === boardSize - 1 && newPos[1] === boardSize - 2) {\n        setWin(true);\n        setGameStarted(false);\n        console.log(\"game won\");\n      }\n      return newPos;\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', movePlayer);\n    return () => window.removeEventListener('keydown', movePlayer);\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: cellSize,\n          height: cellSize,\n          backgroundColor: playerPos[0] === rowIndex && playerPos[1] === colIndex ? 'red' : cell[0] === 2 ? 'green' : cell[0] === 3 ? 'blue' : cell[0] === 1 ? 'black' : 'white'\n          //border: cell === 1 ? '1px solid black' : '1px solid gray'\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(Maze, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Maze;\nconst MazeApp = () => {\n  _s2();\n  const [board, setBoard] = useState([]);\n  const [playerPos, setPlayerPos] = useState([0, 1]);\n  const [win, setWin] = useState(false);\n  const [dim, setDim] = useState(5);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [hasGenerated, setHasGenerated] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [solving, setSolving] = useState(false);\n  const animateWallStep = updatedBoard => {\n    setBoard([...updatedBoard]);\n  };\n  const handleGenerate = () => {\n    setIsGenerating(true);\n    const newBoard = generate(dim, animateWallStep, setIsGenerating, setHasGenerated);\n    setBoard(newBoard);\n    setPlayerPos([-1, -1]);\n    setWin(false);\n  };\n  const handleStartGame = () => {\n    setPlayerPos([0, 1]);\n    setWin(false);\n    setGameStarted(true);\n  };\n  const handleAutoSolve = () => {\n    autoSolve();\n  };\n  const autoSolve = () => {\n    setSolving(true);\n    let path = [[0, 1]];\n    let visited = new Set();\n    const solveStep = () => {\n      if (path.length > 0) {\n        // get most recent space\n        let [row, col] = path[path.length - 1];\n        // color explored spaces greem\n        board[row][col][0] = 2;\n        setBoard([...board]);\n        visited.add([row, col]);\n\n        // if reach end, color this path blue\n        if (row == board.length - 1 && col == board.length - 2) {\n          console.log(\"autosolved\");\n          path.forEach(([r, c]) => {\n            board[r][c][0] = 3;\n          });\n          setSolving(false);\n          setWin(true);\n          setGameStarted(false);\n          return;\n        }\n        let stepAdded = false;\n        const directions = [[1, 0], [0, 1], [-1, 0], [0, -1]];\n        // check each direction (avoid doublle back)\n        for (let [dRow, dCol] of directions) {\n          let newRow = row + dRow;\n          let newCol = col + dCol;\n          if (newRow >= 0 && newRow < board.length && newCol >= 0 && newCol < board.length && board[newRow][newCol][0] === 0 && !visited.has([newRow, newCol])) {\n            path.push([newRow, newCol]);\n            stepAdded = true;\n            break;\n          }\n        }\n        // backtrack if couldn't move forward\n        if (!stepAdded) {\n          path.pop();\n          return solveStep();\n        }\n        setTimeout(solveStep, 10);\n      } else {\n        setSolving(false);\n      }\n    };\n    solveStep();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mazeBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Maze Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Using randomized Kruskal's algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genAndDimSlider\",\n        children: gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"autoSolve\",\n            onClick: handleAutoSolve,\n            children: \"Auto Solve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Use arrow keys to move player to bottom right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [isGenerating ?\n          /*#__PURE__*/\n          /*<button className=\"speedUp\" onClick={handleSpeedUp}>Speed Up</button>*/\n          _jsxDEV(\"div\", {\n            className: \"genText\",\n            children: [\"Generating maze of size: \", dim, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"startMaze\",\n              onClick: handleGenerate,\n              children: \"Generate Maze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dimSliderBox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                id: \"dimSlider\",\n                min: \"1\",\n                max: \"40\",\n                value: dim,\n                onChange: e => setDim(Number(e.target.value))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"dimSlider\",\n                children: [\"Size: \", dim]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 33\n          }, this), hasGenerated && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"startGame\",\n            onClick: handleStartGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), win && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winMessage\",\n        children: \"Maze solved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Maze, {\n        board: board,\n        playerPos: playerPos,\n        setPlayerPos: setPlayerPos,\n        setWin: setWin,\n        setGameStarted: setGameStarted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n};\n_s2(MazeApp, \"j1z5HqafZnkDUWXaakF5w5n9NyI=\");\n_c2 = MazeApp;\nexport default MazeApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"Maze\");\n$RefreshReg$(_c2, \"MazeApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","generate","dim","animateWallStep","setIsGenerating","setHasGenerated","boardDim","cycleDelay","board","walls","i","row","j","push","Set","length","Math","floor","random","wallI","processWall","adj","duplicate","adjI","adjJ","iI","iJ","jI","jJ","sumSet","add","curI","curJ","union","item","setTimeout","Maze","playerPos","setPlayerPos","setWin","setGameStarted","_s","boardSize","cellSize","movePlayer","e","prevPos","newPos","key","max","min","console","log","window","addEventListener","removeEventListener","children","map","rowIndex","style","display","cell","colIndex","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","MazeApp","_s2","setBoard","win","setDim","isGenerating","hasGenerated","gameStarted","solving","setSolving","updatedBoard","handleGenerate","newBoard","handleStartGame","handleAutoSolve","autoSolve","path","visited","solveStep","col","forEach","r","c","stepAdded","directions","dRow","dCol","newRow","newCol","has","pop","className","flexDirection","alignItems","onClick","type","id","value","onChange","Number","target","htmlFor","_c2","$RefreshReg$"],"sources":["C:/Users/Laviero/Documents/Weather/src/pages/Maze.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst generate = (dim, animateWallStep, setIsGenerating, setHasGenerated) => {\r\n    setHasGenerated(false);\r\n    // generate board\r\n    let boardDim = dim * 2 + 1;\r\n    let cycleDelay = boardDim >= 20 ? 1 : 20;\r\n    let board = [];\r\n    let walls = [];\r\n    for (let i = 0; i < boardDim; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < boardDim; j++) {\r\n            if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\r\n                    row.push([1,new Set([[i,j]])]);\r\n                } // walls on edges\r\n            else if (i % 2 === 0 || j % 2 === 0) {\r\n                row.push([1,new Set([[i,j]])]);\r\n                if (!(i % 2 === 0 && j % 2 === 0)) { // add to walls if seperates two open spaces\r\n                    walls.push([i,j]);\r\n                }\r\n            } // walls on even squares\r\n            else {\r\n                row.push([0,new Set([[i,j]])]);\r\n            };\r\n        }\r\n        board.push(row);\r\n    } \r\n\r\n    // entrance and exit\r\n    board[0][1][0] = 0;\r\n    board[boardDim-1][boardDim-2][0] = 0;\r\n\r\n    // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\r\n\r\n    // fisher-yates shuffle wall array\r\n    for (let i = walls.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\r\n    }\r\n\r\n    let wallI = 0;\r\n    const processWall = () =>  {\r\n        if (wallI < walls.length) {\r\n            let i = walls[wallI][0], j = walls[wallI][1];\r\n            let adj = [];\r\n            if (i-1>0 && board[i-1][j][0] == 0) adj.push([i-1,j]); // add adj\r\n            if (j-1>0 && board[i][j-1][0] == 0) adj.push([i,j-1]);\r\n            if (i+1<boardDim-1 && board[i+1][j][0] == 0) adj.push([i+1,j]);\r\n            if (j+1<boardDim-1 && board[i][j+1][0] == 0) adj.push([i,j+1]);\r\n            //console.log(adj.length);\r\n            let duplicate = false; // verify adj spaces no duplicate sets\r\n            for (let adjI = 0; adjI < adj.length; adjI++) {\r\n                for (let adjJ = 0; adjJ < adj.length; adjJ++) {\r\n                    let iI = adj[adjI][0], iJ = adj[adjI][1];\r\n                    let jI = adj[adjJ][0], jJ = adj[adjJ][1];\r\n                    if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\r\n                        duplicate = true;\r\n                        //console.log(\"DENIED at\", i, \",\", j);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!duplicate && adj.length > 0) { // if no adj spaces have dup sets\r\n                //console.log(\"passed at\", i, \",\", j);\r\n                board[i][j][0] = 0;  // make this wall a space\r\n                let sumSet = new Set();\r\n                sumSet.add([i,j]); // add wall to adj spaces' sets\r\n                for (let adjI = 0; adjI < adj.length; adjI++) { // combine sets of adj spaces into sumSet\r\n                    let curI = adj[adjI][0], curJ = adj[adjI][1];\r\n                    sumSet = sumSet.union(board[curI][curJ][1]);\r\n                }\r\n\r\n                for (let item of sumSet) { // set sets of cells in sumSet to sumSet\r\n                    let curI = item[0], curJ = item[1];\r\n                    board[curI][curJ][1] = sumSet;\r\n                }\r\n            }\r\n            wallI++;\r\n            animateWallStep(board);\r\n            setTimeout(processWall, cycleDelay);\r\n        }\r\n\r\n        if (wallI >= walls.length) {\r\n            setIsGenerating(false);\r\n            setHasGenerated(true);\r\n            animateWallStep(board);\r\n        }\r\n    };\r\n\r\n    processWall();\r\n        \r\n    //console.log(\"Final wallI\", wallI);\r\n    return board;\r\n};\r\n\r\n\r\nconst Maze = ({board, playerPos, setPlayerPos, setWin, setGameStarted}) => {\r\n    const boardSize = board.length;\r\n    const cellSize = `${60 / boardSize}vh`;\r\n\r\n    //const [playerPos, setPlayerPos] = useState([1,1])\r\n\r\n    const movePlayer = (e) => {\r\n        setPlayerPos((prevPos) => {\r\n            if (prevPos[0] === -1 && prevPos[1] === -1) return prevPos;\r\n            let newPos = { ...prevPos };\r\n            if (e.key === 'ArrowUp' || e.key === 'w') {\r\n                newPos[0] = Math.max(prevPos[0] - 1, 0);\r\n            } else if (e.key === 'ArrowDown' || e.key === 's') {\r\n                newPos[0] = Math.min(prevPos[0] + 1, boardSize - 1);\r\n            } else if (e.key === 'ArrowLeft' || e.key === 'a') {\r\n                newPos[1] = Math.max(prevPos[1] - 1, 0);\r\n            } else if (e.key === 'ArrowRight' || e.key === 'd') {\r\n                newPos[1] = Math.min(prevPos[1] + 1, boardSize - 1);\r\n            }\r\n\r\n            // prevent move into wall\r\n            if (board[newPos[0]][newPos[1]][0] === 1 && \r\n                (newPos != [0,1] || newPos != [boardSize-1,boardSize-2])) {\r\n                return prevPos;\r\n            }\r\n            // detect win\r\n            if (newPos[0] === boardSize-1 && newPos[1] === boardSize-2) {\r\n                setWin(true);\r\n                setGameStarted(false);\r\n                console.log(\"game won\");\r\n            }\r\n            return newPos;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', movePlayer);\r\n        return () => window.removeEventListener('keydown', movePlayer);\r\n    }, [board]);\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {board.map((row, rowIndex) => (\r\n                <div key={rowIndex} style={{ display: 'flex' }}>\r\n                    {row.map((cell, colIndex) => (\r\n                        <div key={colIndex} style={{\r\n                            width: cellSize,\r\n                            height: cellSize,\r\n                            backgroundColor:\r\n                                playerPos[0] === rowIndex && playerPos[1] === colIndex\r\n                                    ? 'red'\r\n                                    : cell[0] === 2\r\n                                        ? 'green'\r\n                                        : cell[0] === 3\r\n                                            ? 'blue'\r\n                                            : cell[0] === 1\r\n                                                ? 'black'\r\n                                                : 'white',\r\n                            //border: cell === 1 ? '1px solid black' : '1px solid gray'\r\n                        }}></div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MazeApp = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [playerPos, setPlayerPos] = useState([0,1]);\r\n    const [win, setWin] = useState(false);\r\n    const [dim, setDim] = useState(5);\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [hasGenerated, setHasGenerated] = useState(false);\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [solving, setSolving] = useState(false);\r\n\r\n    const animateWallStep = (updatedBoard) => {\r\n        setBoard([...updatedBoard]);\r\n    }\r\n\r\n    const handleGenerate = () => {\r\n        setIsGenerating(true);\r\n        const newBoard = generate(dim, animateWallStep, setIsGenerating, setHasGenerated);\r\n        setBoard(newBoard);\r\n        setPlayerPos([-1,-1]);\r\n        setWin(false);\r\n    };\r\n\r\n    const handleStartGame = () => {\r\n        setPlayerPos([0,1]);\r\n        setWin(false);\r\n        setGameStarted(true);\r\n    };\r\n\r\n    const handleAutoSolve = () => {\r\n        autoSolve();\r\n    };\r\n\r\n    const autoSolve = () => {\r\n        setSolving(true);\r\n        let path = [[0,1]];\r\n        let visited = new Set();\r\n        const solveStep = () => {\r\n            if (path.length > 0) {\r\n                // get most recent space\r\n                let [row, col] = path[path.length-1];\r\n                // color explored spaces greem\r\n                board[row][col][0] = 2;\r\n                setBoard([...board]);\r\n                visited.add([row,col]);\r\n\r\n                // if reach end, color this path blue\r\n                if (row == board.length-1 && col == board.length-2) {\r\n                    console.log(\"autosolved\");\r\n                    path.forEach(([r,c]) => {\r\n                        board[r][c][0] = 3;\r\n                    });\r\n                    setSolving(false);\r\n                    setWin(true);\r\n                    setGameStarted(false);\r\n                    return;\r\n                }\r\n\r\n                let stepAdded = false;\r\n                const directions = [[1,0],[0,1],[-1,0],[0,-1]];\r\n                // check each direction (avoid doublle back)\r\n                for (let [dRow, dCol] of directions) {\r\n                    let newRow = row + dRow;\r\n                    let newCol = col + dCol;\r\n                    if (newRow >= 0 && newRow < board.length && newCol >= 0 && newCol < board.length\r\n                        && board[newRow][newCol][0] === 0 && !visited.has([newRow,newCol])) {\r\n                            path.push([newRow, newCol]);\r\n                            stepAdded = true;\r\n                            break;\r\n                        }\r\n                }\r\n                // backtrack if couldn't move forward\r\n                if (!stepAdded) {\r\n                    path.pop();\r\n                    return solveStep();\r\n                }\r\n                \r\n                setTimeout(solveStep, 10);\r\n            } else {\r\n                setSolving(false);\r\n            }\r\n        };\r\n        solveStep();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mazeBox\">\r\n                <h1>Maze Generator</h1>\r\n                <p>Using randomized Kruskal's algorithm</p>\r\n                <div className=\"genAndDimSlider\">\r\n                    {gameStarted ? (\r\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                            <button className=\"autoSolve\" onClick={handleAutoSolve}>Auto Solve</button>\r\n                            <div>Use arrow keys to move player to bottom right</div>\r\n                        </div>\r\n                    ) : (\r\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                            {isGenerating ? (\r\n                                /*<button className=\"speedUp\" onClick={handleSpeedUp}>Speed Up</button>*/\r\n                                <div className=\"genText\">Generating maze of size: {dim}...</div>\r\n                            ) : (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                    <button className=\"startMaze\" onClick={handleGenerate}>Generate Maze</button>\r\n                                    <div className=\"dimSliderBox\">\r\n                                        <input\r\n                                            type=\"range\"\r\n                                            id=\"dimSlider\"\r\n                                            min=\"1\"\r\n                                            max=\"40\"\r\n                                            value={dim}\r\n                                            onChange={(e) => setDim(Number(e.target.value))}\r\n                                        />\r\n                                        <label htmlFor=\"dimSlider\">Size: {dim}</label>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                            \r\n                            {hasGenerated && (\r\n                                <button className=\"startGame\" onClick={handleStartGame}>Start Game</button>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    \r\n                </div>\r\n                {win && <div className=\"winMessage\">Maze solved!</div>}\r\n                <Maze board={board} playerPos={playerPos} setPlayerPos={setPlayerPos} setWin={setWin} setGameStarted={setGameStarted}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MazeApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}