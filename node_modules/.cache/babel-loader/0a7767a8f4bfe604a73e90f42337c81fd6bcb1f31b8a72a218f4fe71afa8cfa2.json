{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laviero\\\\Documents\\\\Weather\\\\src\\\\pages\\\\Maze.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generate = (dim, animateWallStep, setIsGenerating, setHasGenerated) => {\n  setHasGenerated(false);\n  // generate board\n  let boardDim = dim * 2 + 1;\n  let board = [];\n  let walls = [];\n  for (let i = 0; i < boardDim; i++) {\n    let row = [];\n    for (let j = 0; j < boardDim; j++) {\n      if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\n        row.push([1, new Set([[i, j]])]);\n      } // walls on edges\n      else if (i % 2 === 0 || j % 2 === 0) {\n        row.push([1, new Set([[i, j]])]);\n        if (!(i % 2 === 0 && j % 2 === 0)) {\n          // add to walls if seperates two open spaces\n          walls.push([i, j]);\n        }\n      } // walls on even squares\n      else {\n        row.push([0, new Set([[i, j]])]);\n      }\n      ;\n    }\n    board.push(row);\n  }\n\n  // entrance and exit\n  board[0][1][0] = 0;\n  board[boardDim - 1][boardDim - 2][0] = 0;\n\n  // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\n\n  // fisher-yates shuffle wall array\n  for (let i = walls.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\n  }\n  let wallI = 0;\n  const processWall = () => {\n    if (wallI < walls.length) {\n      let i = walls[wallI][0],\n        j = walls[wallI][1];\n      let adj = [];\n      if (i - 1 > 0 && board[i - 1][j][0] == 0) adj.push([i - 1, j]); // add adj\n      if (j - 1 > 0 && board[i][j - 1][0] == 0) adj.push([i, j - 1]);\n      if (i + 1 < boardDim - 1 && board[i + 1][j][0] == 0) adj.push([i + 1, j]);\n      if (j + 1 < boardDim - 1 && board[i][j + 1][0] == 0) adj.push([i, j + 1]);\n      //console.log(adj.length);\n      let duplicate = false; // verify adj spaces no duplicate sets\n      for (let adjI = 0; adjI < adj.length; adjI++) {\n        for (let adjJ = 0; adjJ < adj.length; adjJ++) {\n          let iI = adj[adjI][0],\n            iJ = adj[adjI][1];\n          let jI = adj[adjJ][0],\n            jJ = adj[adjJ][1];\n          if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\n            duplicate = true;\n            //console.log(\"DENIED at\", i, \",\", j);\n            break;\n          }\n        }\n      }\n      if (!duplicate && adj.length > 0) {\n        // if no adj spaces have dup sets\n        //console.log(\"passed at\", i, \",\", j);\n        board[i][j][0] = 0; // make this wall a space\n        let sumSet = new Set();\n        sumSet.add([i, j]); // add wall to adj spaces' sets\n        for (let adjI = 0; adjI < adj.length; adjI++) {\n          // combine sets of adj spaces into sumSet\n          let curI = adj[adjI][0],\n            curJ = adj[adjI][1];\n          sumSet = sumSet.union(board[curI][curJ][1]);\n        }\n        for (let item of sumSet) {\n          // set sets of cells in sumSet to sumSet\n          let curI = item[0],\n            curJ = item[1];\n          board[curI][curJ][1] = sumSet;\n        }\n      }\n      wallI++;\n      animateWallStep(board);\n      setTimeout(processWall, 5);\n    }\n    if (wallI >= walls.length) {\n      setIsGenerating(false);\n      setHasGenerated(true);\n      animateWallStep(board);\n    }\n  };\n  processWall();\n\n  //console.log(\"Final wallI\", wallI);\n  return board;\n};\nconst Maze = ({\n  board,\n  playerPos,\n  setPlayerPos,\n  setWin\n}) => {\n  _s();\n  const boardSize = board.length;\n  const cellSize = `${60 / boardSize}vh`;\n\n  //const [playerPos, setPlayerPos] = useState([1,1])\n\n  const movePlayer = e => {\n    setPlayerPos(prevPos => {\n      if (prevPos[0] === -1 && prevPos[1] === -1) return prevPos;\n      let newPos = {\n        ...prevPos\n      };\n      if (e.key === 'ArrowUp' || e.key === 'w') {\n        newPos[0] = Math.max(prevPos[0] - 1, 0);\n      } else if (e.key === 'ArrowDown' || e.key === 's') {\n        newPos[0] = Math.min(prevPos[0] + 1, boardSize - 1);\n      } else if (e.key === 'ArrowLeft' || e.key === 'a') {\n        newPos[1] = Math.max(prevPos[1] - 1, 0);\n      } else if (e.key === 'ArrowRight' || e.key === 'd') {\n        newPos[1] = Math.min(prevPos[1] + 1, boardSize - 1);\n      }\n\n      // prevent move into wall\n      if (board[newPos[0]][newPos[1]][0] === 1 && (newPos != [0, 1] || newPos != [boardSize - 1, boardSize - 2])) {\n        return prevPos;\n      }\n      // detect win\n      if (newPos[0] === boardSize - 1 && newPos[1] === boardSize - 2) {\n        setWin(true);\n        console.log(\"game won\");\n      }\n      return newPos;\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', movePlayer);\n    return () => window.removeEventListener('keydown', movePlayer);\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: cellSize,\n          height: cellSize,\n          backgroundColor: playerPos[0] === rowIndex && playerPos[1] === colIndex ? 'red' : cell[0] === 1 ? 'black' : 'white'\n          //border: cell === 1 ? '1px solid black' : '1px solid gray'\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(Maze, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Maze;\nconst MazeApp = () => {\n  _s2();\n  const [board, setBoard] = useState([]);\n  const [playerPos, setPlayerPos] = useState([0, 1]);\n  const [win, setWin] = useState(false);\n  const [dim, setDim] = useState(5);\n  const [accelFromGen, setAccelFromGen] = useState(false);\n  const [genClass, setGenClass] = useState('startMaze');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [hasGenerated, setHasGenerated] = useState(false);\n  const animateWallStep = updatedBoard => {\n    setBoard([...updatedBoard]);\n  };\n  const handleGenerate = () => {\n    setIsGenerating(true);\n    //setAccelFromGen((prevAccelFromGen) => !prevAccelFromGen)\n    //setGenClass(prevClass => prevClass.includes('deployed') ? 'menuArea' : 'menuArea deployed');\n    const newBoard = generate(dim, animateWallStep, setIsGenerating, setHasGenerated);\n    setBoard(newBoard);\n    setPlayerPos([-1, -1]);\n    setWin(false);\n  };\n  const handleSpeedUp = () => {\n    setIsGenerating(false);\n    //isInstant = true;\n    //generate(dim, animateWallStep, setIsGenerating, [], setTimeouts, true);\n    //processWallRef.current(true);\n  };\n  const handleStartGame = () => {\n    setPlayerPos([0, 1]);\n    setWin(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mazeBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Maze Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Using randomized Kruskal's algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genAndDimSlider\",\n        children: [isGenerating ?\n        /*#__PURE__*/\n        /*<button className=\"speedUp\" onClick={handleSpeedUp}>Speed Up</button>*/\n        _jsxDEV(\"div\", {\n          className: \"genText\",\n          children: [\"Generating maze of size: \", dim, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"startMaze\",\n            onClick: handleGenerate,\n            children: \"Generate Maze\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dimSliderBox\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              id: \"dimSlider\",\n              min: \"1\",\n              max: \"50\",\n              value: dim,\n              onChange: e => setDim(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"dimSlider\",\n              children: [\"Size: \", dim]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this), hasGenerated && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"startGame\",\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), win && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winMessage\",\n        children: \"Maze solved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Maze, {\n        board: board,\n        playerPos: playerPos,\n        setPlayerPos: setPlayerPos,\n        setWin: setWin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 9\n  }, this);\n};\n_s2(MazeApp, \"ZyvnHk/UJ+oHJuUM67VBqVweZl8=\");\n_c2 = MazeApp;\nexport default MazeApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"Maze\");\n$RefreshReg$(_c2, \"MazeApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","generate","dim","animateWallStep","setIsGenerating","setHasGenerated","boardDim","board","walls","i","row","j","push","Set","length","Math","floor","random","wallI","processWall","adj","duplicate","adjI","adjJ","iI","iJ","jI","jJ","sumSet","add","curI","curJ","union","item","setTimeout","Maze","playerPos","setPlayerPos","setWin","_s","boardSize","cellSize","movePlayer","e","prevPos","newPos","key","max","min","console","log","window","addEventListener","removeEventListener","children","map","rowIndex","style","display","cell","colIndex","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","MazeApp","_s2","setBoard","win","setDim","accelFromGen","setAccelFromGen","genClass","setGenClass","isGenerating","hasGenerated","updatedBoard","handleGenerate","newBoard","handleSpeedUp","handleStartGame","className","onClick","type","id","value","onChange","Number","target","htmlFor","_c2","$RefreshReg$"],"sources":["C:/Users/Laviero/Documents/Weather/src/pages/Maze.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst generate = (dim, animateWallStep, setIsGenerating, setHasGenerated) => {\r\n    setHasGenerated(false);\r\n    // generate board\r\n    let boardDim = dim * 2 + 1;\r\n    let board = [];\r\n    let walls = [];\r\n    for (let i = 0; i < boardDim; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < boardDim; j++) {\r\n            if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\r\n                    row.push([1,new Set([[i,j]])]);\r\n                } // walls on edges\r\n            else if (i % 2 === 0 || j % 2 === 0) {\r\n                row.push([1,new Set([[i,j]])]);\r\n                if (!(i % 2 === 0 && j % 2 === 0)) { // add to walls if seperates two open spaces\r\n                    walls.push([i,j]);\r\n                }\r\n            } // walls on even squares\r\n            else {\r\n                row.push([0,new Set([[i,j]])]);\r\n            };\r\n        }\r\n        board.push(row);\r\n    } \r\n\r\n    // entrance and exit\r\n    board[0][1][0] = 0;\r\n    board[boardDim-1][boardDim-2][0] = 0;\r\n\r\n    // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\r\n\r\n    // fisher-yates shuffle wall array\r\n    for (let i = walls.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\r\n    }\r\n\r\n    let wallI = 0;\r\n    const processWall = () =>  {\r\n        if (wallI < walls.length) {\r\n            let i = walls[wallI][0], j = walls[wallI][1];\r\n            let adj = [];\r\n            if (i-1>0 && board[i-1][j][0] == 0) adj.push([i-1,j]); // add adj\r\n            if (j-1>0 && board[i][j-1][0] == 0) adj.push([i,j-1]);\r\n            if (i+1<boardDim-1 && board[i+1][j][0] == 0) adj.push([i+1,j]);\r\n            if (j+1<boardDim-1 && board[i][j+1][0] == 0) adj.push([i,j+1]);\r\n            //console.log(adj.length);\r\n            let duplicate = false; // verify adj spaces no duplicate sets\r\n            for (let adjI = 0; adjI < adj.length; adjI++) {\r\n                for (let adjJ = 0; adjJ < adj.length; adjJ++) {\r\n                    let iI = adj[adjI][0], iJ = adj[adjI][1];\r\n                    let jI = adj[adjJ][0], jJ = adj[adjJ][1];\r\n                    if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\r\n                        duplicate = true;\r\n                        //console.log(\"DENIED at\", i, \",\", j);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!duplicate && adj.length > 0) { // if no adj spaces have dup sets\r\n                //console.log(\"passed at\", i, \",\", j);\r\n                board[i][j][0] = 0;  // make this wall a space\r\n                let sumSet = new Set();\r\n                sumSet.add([i,j]); // add wall to adj spaces' sets\r\n                for (let adjI = 0; adjI < adj.length; adjI++) { // combine sets of adj spaces into sumSet\r\n                    let curI = adj[adjI][0], curJ = adj[adjI][1];\r\n                    sumSet = sumSet.union(board[curI][curJ][1]);\r\n                }\r\n\r\n                for (let item of sumSet) { // set sets of cells in sumSet to sumSet\r\n                    let curI = item[0], curJ = item[1];\r\n                    board[curI][curJ][1] = sumSet;\r\n                }\r\n            }\r\n            wallI++;\r\n            animateWallStep(board);\r\n            setTimeout(processWall, 5);\r\n        }\r\n\r\n        if (wallI >= walls.length) {\r\n            setIsGenerating(false);\r\n            setHasGenerated(true);\r\n            animateWallStep(board);\r\n        }\r\n    };\r\n\r\n    processWall();\r\n        \r\n    //console.log(\"Final wallI\", wallI);\r\n    return board;\r\n};\r\n\r\n\r\nconst Maze = ({board, playerPos, setPlayerPos, setWin}) => {\r\n    const boardSize = board.length;\r\n    const cellSize = `${60 / boardSize}vh`;\r\n\r\n    //const [playerPos, setPlayerPos] = useState([1,1])\r\n\r\n    const movePlayer = (e) => {\r\n        setPlayerPos((prevPos) => {\r\n            if (prevPos[0] === -1 && prevPos[1] === -1) return prevPos;\r\n            let newPos = { ...prevPos };\r\n            if (e.key === 'ArrowUp' || e.key === 'w') {\r\n                newPos[0] = Math.max(prevPos[0] - 1, 0);\r\n            } else if (e.key === 'ArrowDown' || e.key === 's') {\r\n                newPos[0] = Math.min(prevPos[0] + 1, boardSize - 1);\r\n            } else if (e.key === 'ArrowLeft' || e.key === 'a') {\r\n                newPos[1] = Math.max(prevPos[1] - 1, 0);\r\n            } else if (e.key === 'ArrowRight' || e.key === 'd') {\r\n                newPos[1] = Math.min(prevPos[1] + 1, boardSize - 1);\r\n            }\r\n\r\n            // prevent move into wall\r\n            if (board[newPos[0]][newPos[1]][0] === 1 && \r\n                (newPos != [0,1] || newPos != [boardSize-1,boardSize-2])) {\r\n                return prevPos;\r\n            }\r\n            // detect win\r\n            if (newPos[0] === boardSize-1 && newPos[1] === boardSize-2) {\r\n                setWin(true);\r\n                console.log(\"game won\");\r\n            }\r\n            return newPos;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', movePlayer);\r\n        return () => window.removeEventListener('keydown', movePlayer);\r\n    }, [board]);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {board.map((row, rowIndex) => (\r\n                <div key={rowIndex} style={{ display: 'flex' }}>\r\n                    {row.map((cell, colIndex) => (\r\n                        <div key={colIndex} style={{\r\n                            width: cellSize,\r\n                            height: cellSize,\r\n                            backgroundColor:\r\n                                playerPos[0] === rowIndex && playerPos[1] === colIndex\r\n                                    ? 'red'\r\n                                    : cell[0] === 1\r\n                                        ? 'black'\r\n                                        : 'white',\r\n                            //border: cell === 1 ? '1px solid black' : '1px solid gray'\r\n                        }}></div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MazeApp = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const [playerPos, setPlayerPos] = useState([0,1]);\r\n    const [win, setWin] = useState(false);\r\n    const [dim, setDim] = useState(5);\r\n    const [accelFromGen, setAccelFromGen] = useState(false);\r\n    const [genClass, setGenClass] = useState('startMaze');\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [hasGenerated, setHasGenerated] = useState(false);\r\n\r\n    const animateWallStep = (updatedBoard) => {\r\n        setBoard([...updatedBoard]);\r\n    }\r\n\r\n    const handleGenerate = () => {\r\n        setIsGenerating(true);\r\n        //setAccelFromGen((prevAccelFromGen) => !prevAccelFromGen)\r\n        //setGenClass(prevClass => prevClass.includes('deployed') ? 'menuArea' : 'menuArea deployed');\r\n        const newBoard = generate(dim, animateWallStep, setIsGenerating, setHasGenerated);\r\n        setBoard(newBoard);\r\n        setPlayerPos([-1,-1]);\r\n        setWin(false);\r\n    };\r\n\r\n    const handleSpeedUp = () => {\r\n        setIsGenerating(false);\r\n        //isInstant = true;\r\n        //generate(dim, animateWallStep, setIsGenerating, [], setTimeouts, true);\r\n        //processWallRef.current(true);\r\n    }\r\n\r\n    const handleStartGame = () => {\r\n        setPlayerPos([0,1]);\r\n        setWin(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mazeBox\">\r\n                <h1>Maze Generator</h1>\r\n                <p>Using randomized Kruskal's algorithm</p>\r\n                <div className=\"genAndDimSlider\">\r\n                    {isGenerating ? (\r\n                        /*<button className=\"speedUp\" onClick={handleSpeedUp}>Speed Up</button>*/\r\n                        <div className=\"genText\">Generating maze of size: {dim}...</div>\r\n                    ) : (\r\n                        <div>\r\n                            <button className=\"startMaze\" onClick={handleGenerate}>Generate Maze</button>\r\n                            <div className=\"dimSliderBox\">\r\n                                <input\r\n                                    type=\"range\"\r\n                                    id=\"dimSlider\"\r\n                                    min=\"1\"\r\n                                    max=\"50\"\r\n                                    value={dim}\r\n                                    onChange={(e) => setDim(Number(e.target.value))}\r\n                                />\r\n                                <label htmlFor=\"dimSlider\">Size: {dim}</label>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {hasGenerated && (\r\n                        <button className=\"startGame\" onClick={handleStartGame}>Start Game</button>\r\n                    )}\r\n                </div>\r\n                {win && <div className=\"winMessage\">Maze solved!</div>}\r\n                <Maze board={board} playerPos={playerPos} setPlayerPos={setPlayerPos} setWin={setWin}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MazeApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}