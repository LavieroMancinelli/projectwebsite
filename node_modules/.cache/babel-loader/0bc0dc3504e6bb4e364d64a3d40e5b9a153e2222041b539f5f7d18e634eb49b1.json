{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laviero\\\\Documents\\\\Weather\\\\src\\\\pages\\\\Maze.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generate = dim => {\n  // generate board\n  let boardDim = dim * 2 + 1;\n  let board = [];\n  let walls = [];\n  let sets = [];\n  for (let i = 0; i < boardDim; i++) {\n    let row = [];\n    for (let j = 0; j < boardDim; j++) {\n      if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\n        row.push([1, new Set([[i, j]])]);\n      } // walls on edges\n      else if (i % 2 === 0 || j % 2 === 0) {\n        row.push([1, new Set([[i, j]])]);\n        if (!(i % 2 === 0 && j % 2 === 0)) {\n          // add to walls if seperates two open spaces\n          walls.push([i, j]);\n        }\n      } // walls on even squares\n      else {\n        row.push([0, new Set([[i, j]])]);\n      }\n      ;\n    }\n    board.push(row);\n  }\n\n  // entrance and exit\n  board[0][1][0] = 0;\n  board[boardDim - 1][boardDim - 2][0] = 0;\n\n  // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\n\n  // fisher-yates shuffle wall array\n  for (let i = walls.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\n  }\n\n  // cant use walls.length > 0 because it should end with some walls left\n  for (let wallI = 0; wallI < walls.length; wallI++) {\n    let i = walls[wallI][0],\n      j = walls[wallI][1];\n    let adj = [];\n    if (i - 1 > 0 && board[i - 1][j][0] == 0) adj.push([i - 1, j]); // add adj\n    if (j - 1 > 0 && board[i][j - 1][0] == 0) adj.push([i, j - 1]);\n    if (i + 1 < boardDim - 1 && board[i + 1][j][0] == 0) adj.push([i + 1, j]);\n    if (j + 1 < boardDim - 1 && board[i][j + 1][0] == 0) adj.push([i, j + 1]);\n    //console.log(adj.length);\n    let duplicate = false; // verify adj spaces no duplicate sets\n    for (let adjI = 0; adjI < adj.length; adjI++) {\n      for (let adjJ = 0; adjJ < adj.length; adjJ++) {\n        let iI = adj[adjI][0],\n          iJ = adj[adjI][1];\n        let jI = adj[adjJ][0],\n          jJ = adj[adjJ][1];\n        if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\n          duplicate = true;\n          //console.log(\"DENIED at\", i, \",\", j);\n          break;\n        }\n      }\n    }\n    if (!duplicate && adj.length > 0) {\n      // if no adj spaces have dup sets\n      //console.log(\"passed at\", i, \",\", j);\n      board[i][j][0] = 0; // make this wall a space\n      let sumSet = new Set();\n      sumSet.add([i, j]); // add wall to adj spaces' sets\n      for (let adjI = 0; adjI < adj.length; adjI++) {\n        // combine sets of adj spaces into sumSet\n        let curI = adj[adjI][0],\n          curJ = adj[adjI][1];\n        sumSet = sumSet.union(board[curI][curJ][1]);\n      }\n      for (let item of sumSet) {\n        // set sets of cells in sumSet to sumSet\n        let curI = item[0],\n          curJ = item[1];\n        board[curI][curJ][1] = sumSet;\n      }\n    }\n  }\n\n  //console.log(\"Final wallI\", wallI);\n  return board;\n};\nconst Maze = ({\n  board\n}) => {\n  _s();\n  const boardSize = board.length;\n  const cellSize = `${60 / boardSize}vh`;\n  const [playerPos, setPlayerPos] = useState([1, 1]);\n  const movePlayer = e => {\n    setPlayerPos(prevPos => {\n      let newPos = {\n        ...prevPos\n      };\n      if (e.key === 'ArrowUp' || e.key === 'w') {\n        newPos[0] = Math.max(prevPos[0] - 1, 1);\n      } else if (e.key === 'ArrowDown' || e.key === 's') {\n        newPos[0] = Math.min(prevPos[0] + 1, boardSize - 2);\n      } else if (e.key === 'ArrowLeft' || e.key === 'a') {\n        newPos[1] = Math.max(prevPos[1] - 1, 1);\n      } else if (e.key === 'ArrowRight' || e.key === 'd') {\n        newPos[1] = Math.min(prevPos[1] + 1, boardSize - 2);\n      }\n\n      // Stop moving into wall\n      if (board[newPos[0]][newPos[1]][0] === 1 && (newPos != [0, 1] || newPos != [boardSize - 1, boardSize - 2])) {\n        return prevPos;\n      }\n      return newPos;\n    });\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', movePlayer);\n    return () => window.removeEventListener('keydown', movePlayer);\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: cellSize,\n          height: cellSize,\n          backgroundColor: playerPos[0] === rowIndex && playerPos[1] === colIndex ? 'red' : cell[0] === 1 ? 'black' : 'white'\n          //border: cell === 1 ? '1px solid black' : '1px solid gray'\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(Maze, \"eNks0maXj++MzPkmSzs4Jnlofgg=\");\n_c = Maze;\nconst MazeApp = () => {\n  _s2();\n  const [board, setBoard] = useState([]);\n  const handleGenerate = () => {\n    const newBoard = generate(20);\n    setBoard(newBoard);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mazeBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Maze Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enjoy the maze game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startMaze\",\n        onClick: handleGenerate,\n        children: \"Generate Maze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startGame\",\n        onClick: handleGenerate,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Maze, {\n        board: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s2(MazeApp, \"TDIF6ESD0U4AdfAJN9S3iTjCS38=\");\n_c2 = MazeApp;\nexport default MazeApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"Maze\");\n$RefreshReg$(_c2, \"MazeApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","generate","dim","boardDim","board","walls","sets","i","row","j","push","Set","length","Math","floor","random","wallI","adj","duplicate","adjI","adjJ","iI","iJ","jI","jJ","sumSet","add","curI","curJ","union","item","Maze","_s","boardSize","cellSize","playerPos","setPlayerPos","movePlayer","e","prevPos","newPos","key","max","min","window","addEventListener","removeEventListener","children","map","rowIndex","style","display","cell","colIndex","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","MazeApp","_s2","setBoard","handleGenerate","newBoard","className","onClick","_c2","$RefreshReg$"],"sources":["C:/Users/Laviero/Documents/Weather/src/pages/Maze.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst generate = (dim) => {\r\n    // generate board\r\n    let boardDim = dim * 2 + 1;\r\n    let board = [];\r\n    let walls = [];\r\n    let sets = [];\r\n    for (let i = 0; i < boardDim; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < boardDim; j++) {\r\n            if (i === 0 || j === 0 || i === boardDim - 1 || j === boardDim - 1) {\r\n                    row.push([1,new Set([[i,j]])]);\r\n                } // walls on edges\r\n            else if (i % 2 === 0 || j % 2 === 0) {\r\n                row.push([1,new Set([[i,j]])]);\r\n                if (!(i % 2 === 0 && j % 2 === 0)) { // add to walls if seperates two open spaces\r\n                    walls.push([i,j]);\r\n                }\r\n            } // walls on even squares\r\n            else {\r\n                row.push([0,new Set([[i,j]])]);\r\n            };\r\n        }\r\n        board.push(row);\r\n    } \r\n\r\n    // entrance and exit\r\n    board[0][1][0] = 0;\r\n    board[boardDim-1][boardDim-2][0] = 0;\r\n\r\n    // NEED TO NOT STORE SETS ON CELLS BECAUSE WHEN UPDATE ONE NEED TO UPDATE ALL CONNECTED SETS\r\n\r\n    // fisher-yates shuffle wall array\r\n    for (let i = walls.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [walls[i], walls[j]] = [walls[j], walls[i]]; // Swap elements\r\n    }\r\n\r\n    // cant use walls.length > 0 because it should end with some walls left\r\n    for (let wallI = 0; wallI < walls.length; wallI++) {\r\n        let i = walls[wallI][0], j = walls[wallI][1];\r\n        let adj = [];\r\n        if (i-1>0 && board[i-1][j][0] == 0) adj.push([i-1,j]); // add adj\r\n        if (j-1>0 && board[i][j-1][0] == 0) adj.push([i,j-1]);\r\n        if (i+1<boardDim-1 && board[i+1][j][0] == 0) adj.push([i+1,j]);\r\n        if (j+1<boardDim-1 && board[i][j+1][0] == 0) adj.push([i,j+1]);\r\n        //console.log(adj.length);\r\n        let duplicate = false; // verify adj spaces no duplicate sets\r\n        for (let adjI = 0; adjI < adj.length; adjI++) {\r\n            for (let adjJ = 0; adjJ < adj.length; adjJ++) {\r\n                let iI = adj[adjI][0], iJ = adj[adjI][1];\r\n                let jI = adj[adjJ][0], jJ = adj[adjJ][1];\r\n                if (adjI != adjJ && board[iI][iJ][1] == board[jI][jJ][1]) {\r\n                    duplicate = true;\r\n                    //console.log(\"DENIED at\", i, \",\", j);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!duplicate && adj.length > 0) { // if no adj spaces have dup sets\r\n            //console.log(\"passed at\", i, \",\", j);\r\n            board[i][j][0] = 0;  // make this wall a space\r\n            let sumSet = new Set();\r\n            sumSet.add([i,j]); // add wall to adj spaces' sets\r\n            for (let adjI = 0; adjI < adj.length; adjI++) { // combine sets of adj spaces into sumSet\r\n                let curI = adj[adjI][0], curJ = adj[adjI][1];\r\n                sumSet = sumSet.union(board[curI][curJ][1]);\r\n            }\r\n\r\n            for (let item of sumSet) { // set sets of cells in sumSet to sumSet\r\n                let curI = item[0], curJ = item[1];\r\n                board[curI][curJ][1] = sumSet;\r\n            }\r\n        }\r\n    }\r\n        \r\n    //console.log(\"Final wallI\", wallI);\r\n    return board;\r\n};\r\n\r\n\r\nconst Maze = ({board}) => {\r\n    const boardSize = board.length;\r\n    const cellSize = `${60 / boardSize}vh`\r\n\r\n    const [playerPos, setPlayerPos] = useState([1,1])\r\n\r\n    const movePlayer = (e) => {\r\n        setPlayerPos((prevPos) => {\r\n            let newPos = { ...prevPos };\r\n            if (e.key === 'ArrowUp' || e.key === 'w') {\r\n                newPos[0] = Math.max(prevPos[0] - 1, 1);\r\n            } else if (e.key === 'ArrowDown' || e.key === 's') {\r\n                newPos[0] = Math.min(prevPos[0] + 1, boardSize - 2);\r\n            } else if (e.key === 'ArrowLeft' || e.key === 'a') {\r\n                newPos[1] = Math.max(prevPos[1] - 1, 1);\r\n            } else if (e.key === 'ArrowRight' || e.key === 'd') {\r\n                newPos[1] = Math.min(prevPos[1] + 1, boardSize - 2);\r\n            }\r\n\r\n            // Stop moving into wall\r\n            if (board[newPos[0]][newPos[1]][0] === 1 && \r\n                (newPos != [0,1] || newPos != [boardSize-1,boardSize-2])) {\r\n                return prevPos;\r\n            }\r\n            return newPos;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', movePlayer);\r\n        return () => window.removeEventListener('keydown', movePlayer);\r\n    }, [board]);\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {board.map((row, rowIndex) => (\r\n                <div key={rowIndex} style={{ display: 'flex' }}>\r\n                    {row.map((cell, colIndex) => (\r\n                        <div key={colIndex} style={{\r\n                            width: cellSize,\r\n                            height: cellSize,\r\n                            backgroundColor:\r\n                                playerPos[0] === rowIndex && playerPos[1] === colIndex\r\n                                    ? 'red'\r\n                                    : cell[0] === 1\r\n                                        ? 'black'\r\n                                        : 'white',\r\n                            //border: cell === 1 ? '1px solid black' : '1px solid gray'\r\n                        }}></div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MazeApp = () => {\r\n    const [board, setBoard] = useState([]);\r\n    const handleGenerate = () => {\r\n        const newBoard = generate(20);\r\n        setBoard(newBoard);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mazeBox\">\r\n                <h1>Maze Page</h1>\r\n                <p>Enjoy the maze game!</p>\r\n                <button className=\"startMaze\" onClick={handleGenerate}>Generate Maze</button>\r\n                <button className=\"startGame\" onClick={handleGenerate}>Start Game</button>\r\n                <Maze board={board}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MazeApp;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EACtB;EACA,IAAIC,QAAQ,GAAGD,GAAG,GAAG,CAAC,GAAG,CAAC;EAC1B,IAAIE,KAAK,GAAG,EAAE;EACd,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;IAC/B,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MAC/B,IAAIF,CAAC,KAAK,CAAC,IAAIE,CAAC,KAAK,CAAC,IAAIF,CAAC,KAAKJ,QAAQ,GAAG,CAAC,IAAIM,CAAC,KAAKN,QAAQ,GAAG,CAAC,EAAE;QAC5DK,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAIC,GAAG,CAAC,CAAC,CAACJ,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;MAAA,KACD,IAAIF,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACjCD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAIC,GAAG,CAAC,CAAC,CAACJ,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,EAAEF,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;UAAE;UACjCJ,KAAK,CAACK,IAAI,CAAC,CAACH,CAAC,EAACE,CAAC,CAAC,CAAC;QACrB;MACJ,CAAC,CAAC;MAAA,KACG;QACDD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,EAAC,IAAIC,GAAG,CAAC,CAAC,CAACJ,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClC;MAAC;IACL;IACAL,KAAK,CAACM,IAAI,CAACF,GAAG,CAAC;EACnB;;EAEA;EACAJ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EAClBA,KAAK,CAACD,QAAQ,GAAC,CAAC,CAAC,CAACA,QAAQ,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;;EAEpC;;EAEA;EACA,KAAK,IAAII,CAAC,GAAGF,KAAK,CAACO,MAAM,GAAG,CAAC,EAAEL,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACvC,MAAME,CAAC,GAAGI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIR,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACF,KAAK,CAACE,CAAC,CAAC,EAAEF,KAAK,CAACI,CAAC,CAAC,CAAC,GAAG,CAACJ,KAAK,CAACI,CAAC,CAAC,EAAEJ,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD;;EAEA;EACA,KAAK,IAAIS,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGX,KAAK,CAACO,MAAM,EAAEI,KAAK,EAAE,EAAE;IAC/C,IAAIT,CAAC,GAAGF,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;MAAEP,CAAC,GAAGJ,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAIV,CAAC,GAAC,CAAC,GAAC,CAAC,IAAIH,KAAK,CAACG,CAAC,GAAC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEQ,GAAG,CAACP,IAAI,CAAC,CAACH,CAAC,GAAC,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,IAAIA,CAAC,GAAC,CAAC,GAAC,CAAC,IAAIL,KAAK,CAACG,CAAC,CAAC,CAACE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEQ,GAAG,CAACP,IAAI,CAAC,CAACH,CAAC,EAACE,CAAC,GAAC,CAAC,CAAC,CAAC;IACrD,IAAIF,CAAC,GAAC,CAAC,GAACJ,QAAQ,GAAC,CAAC,IAAIC,KAAK,CAACG,CAAC,GAAC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEQ,GAAG,CAACP,IAAI,CAAC,CAACH,CAAC,GAAC,CAAC,EAACE,CAAC,CAAC,CAAC;IAC9D,IAAIA,CAAC,GAAC,CAAC,GAACN,QAAQ,GAAC,CAAC,IAAIC,KAAK,CAACG,CAAC,CAAC,CAACE,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEQ,GAAG,CAACP,IAAI,CAAC,CAACH,CAAC,EAACE,CAAC,GAAC,CAAC,CAAC,CAAC;IAC9D;IACA,IAAIS,SAAS,GAAG,KAAK,CAAC,CAAC;IACvB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,GAAG,CAACL,MAAM,EAAEO,IAAI,EAAE,EAAE;MAC1C,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGH,GAAG,CAACL,MAAM,EAAEQ,IAAI,EAAE,EAAE;QAC1C,IAAIC,EAAE,GAAGJ,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;UAAEG,EAAE,GAAGL,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,IAAII,EAAE,GAAGN,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;UAAEI,EAAE,GAAGP,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,IAAID,IAAI,IAAIC,IAAI,IAAIhB,KAAK,CAACiB,EAAE,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAIlB,KAAK,CAACmB,EAAE,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;UACtDN,SAAS,GAAG,IAAI;UAChB;UACA;QACJ;MACJ;IACJ;IAEA,IAAI,CAACA,SAAS,IAAID,GAAG,CAACL,MAAM,GAAG,CAAC,EAAE;MAAE;MAChC;MACAR,KAAK,CAACG,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAE;MACrB,IAAIgB,MAAM,GAAG,IAAId,GAAG,CAAC,CAAC;MACtBc,MAAM,CAACC,GAAG,CAAC,CAACnB,CAAC,EAACE,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,KAAK,IAAIU,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGF,GAAG,CAACL,MAAM,EAAEO,IAAI,EAAE,EAAE;QAAE;QAC5C,IAAIQ,IAAI,GAAGV,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;UAAES,IAAI,GAAGX,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5CM,MAAM,GAAGA,MAAM,CAACI,KAAK,CAACzB,KAAK,CAACuB,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C;MAEA,KAAK,IAAIE,IAAI,IAAIL,MAAM,EAAE;QAAE;QACvB,IAAIE,IAAI,GAAGG,IAAI,CAAC,CAAC,CAAC;UAAEF,IAAI,GAAGE,IAAI,CAAC,CAAC,CAAC;QAClC1B,KAAK,CAACuB,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGH,MAAM;MACjC;IACJ;EACJ;;EAEA;EACA,OAAOrB,KAAK;AAChB,CAAC;AAGD,MAAM2B,IAAI,GAAGA,CAAC;EAAC3B;AAAK,CAAC,KAAK;EAAA4B,EAAA;EACtB,MAAMC,SAAS,GAAG7B,KAAK,CAACQ,MAAM;EAC9B,MAAMsB,QAAQ,GAAG,GAAG,EAAE,GAAGD,SAAS,IAAI;EAEtC,MAAM,CAACE,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;EAEjD,MAAMwC,UAAU,GAAIC,CAAC,IAAK;IACtBF,YAAY,CAAEG,OAAO,IAAK;MACtB,IAAIC,MAAM,GAAG;QAAE,GAAGD;MAAQ,CAAC;MAC3B,IAAID,CAAC,CAACG,GAAG,KAAK,SAAS,IAAIH,CAAC,CAACG,GAAG,KAAK,GAAG,EAAE;QACtCD,MAAM,CAAC,CAAC,CAAC,GAAG3B,IAAI,CAAC6B,GAAG,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAC3C,CAAC,MAAM,IAAID,CAAC,CAACG,GAAG,KAAK,WAAW,IAAIH,CAAC,CAACG,GAAG,KAAK,GAAG,EAAE;QAC/CD,MAAM,CAAC,CAAC,CAAC,GAAG3B,IAAI,CAAC8B,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEN,SAAS,GAAG,CAAC,CAAC;MACvD,CAAC,MAAM,IAAIK,CAAC,CAACG,GAAG,KAAK,WAAW,IAAIH,CAAC,CAACG,GAAG,KAAK,GAAG,EAAE;QAC/CD,MAAM,CAAC,CAAC,CAAC,GAAG3B,IAAI,CAAC6B,GAAG,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;MAC3C,CAAC,MAAM,IAAID,CAAC,CAACG,GAAG,KAAK,YAAY,IAAIH,CAAC,CAACG,GAAG,KAAK,GAAG,EAAE;QAChDD,MAAM,CAAC,CAAC,CAAC,GAAG3B,IAAI,CAAC8B,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEN,SAAS,GAAG,CAAC,CAAC;MACvD;;MAEA;MACA,IAAI7B,KAAK,CAACoC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KACnCA,MAAM,IAAI,CAAC,CAAC,EAAC,CAAC,CAAC,IAAIA,MAAM,IAAI,CAACP,SAAS,GAAC,CAAC,EAACA,SAAS,GAAC,CAAC,CAAC,CAAC,EAAE;QAC1D,OAAOM,OAAO;MAClB;MACA,OAAOC,MAAM;IACjB,CAAC,CAAC;EACN,CAAC;EAED1C,SAAS,CAAC,MAAM;IACZ8C,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAER,UAAU,CAAC;IAC9C,OAAO,MAAMO,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAET,UAAU,CAAC;EAClE,CAAC,EAAE,CAACjC,KAAK,CAAC,CAAC;EAGX,oBACIJ,OAAA;IAAA+C,QAAA,EACK3C,KAAK,CAAC4C,GAAG,CAAC,CAACxC,GAAG,EAAEyC,QAAQ,kBACrBjD,OAAA;MAAoBkD,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAO,CAAE;MAAAJ,QAAA,EAC1CvC,GAAG,CAACwC,GAAG,CAAC,CAACI,IAAI,EAAEC,QAAQ,kBACpBrD,OAAA;QAAoBkD,KAAK,EAAE;UACvBI,KAAK,EAAEpB,QAAQ;UACfqB,MAAM,EAAErB,QAAQ;UAChBsB,eAAe,EACXrB,SAAS,CAAC,CAAC,CAAC,KAAKc,QAAQ,IAAId,SAAS,CAAC,CAAC,CAAC,KAAKkB,QAAQ,GAChD,KAAK,GACLD,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GACT,OAAO,GACP;UACd;QACJ;MAAE,GAVQC,QAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACX;IAAC,GAbIX,QAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAA5B,EAAA,CAvDKD,IAAI;AAAA8B,EAAA,GAAJ9B,IAAI;AAyDV,MAAM+B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClB,MAAM,CAAC3D,KAAK,EAAE4D,QAAQ,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMoE,cAAc,GAAGA,CAAA,KAAM;IACzB,MAAMC,QAAQ,GAAGjE,QAAQ,CAAC,EAAE,CAAC;IAC7B+D,QAAQ,CAACE,QAAQ,CAAC;EACtB,CAAC;EAED,oBACIlE,OAAA;IAAA+C,QAAA,eACI/C,OAAA;MAAKmE,SAAS,EAAC,SAAS;MAAApB,QAAA,gBACpB/C,OAAA;QAAA+C,QAAA,EAAI;MAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClB5D,OAAA;QAAA+C,QAAA,EAAG;MAAoB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC3B5D,OAAA;QAAQmE,SAAS,EAAC,WAAW;QAACC,OAAO,EAAEH,cAAe;QAAAlB,QAAA,EAAC;MAAa;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7E5D,OAAA;QAAQmE,SAAS,EAAC,WAAW;QAACC,OAAO,EAAEH,cAAe;QAAAlB,QAAA,EAAC;MAAU;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1E5D,OAAA,CAAC+B,IAAI;QAAC3B,KAAK,EAAEA;MAAM;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAAG,GAAA,CAlBKD,OAAO;AAAAO,GAAA,GAAPP,OAAO;AAoBb,eAAeA,OAAO;AAAC,IAAAD,EAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}